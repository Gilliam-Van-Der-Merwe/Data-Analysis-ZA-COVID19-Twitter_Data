news24_sent <-
news24_tweets %>%
select("screen_name", "text")
#removal of http elements
news24_sent$stripped_text <-
gsub("http\\S+", "",news24_sent$text)
#unnest_tokens to convert to lower case + remove punc + add indiv tweet ID
news24_sent_stem <-
news24_sent %>%
select(stripped_text) %>%
unnest_tokens(word, stripped_text)
#remove stop words
cleaned_news24_sent <-
news24_sent_stem %>%
anti_join(stop_words)
#bing sentiment analysis on News24 tweets
bing_news24 <-
cleaned_news24_sent %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort =TRUE)%>%
ungroup()
#Plot
bing_news24 %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
labs(title = "Tweets of NEWS24 ",
y = "Contribution to sentiment",
x = "") +
coord_flip()+
facet_wrap(~sentiment, scales = "free_y") +
theme_hc()
#select
Health24_sent <-
health24_timeline_df  %>%
select("screen_name", "text")
#manual removal of http elements
Health24_sent$stripped_text <-
gsub("http\\S+", "",Health24_sent$text)
#unnest_tokens to convert to lower case + remove punctuation + add indiv tweet ID
Health24_sent_stem <-
Health24_sent %>%
select(stripped_text) %>%
unnest_tokens(word, stripped_text)
#remove stop words
cleaned_Health24_sent <-
Health24_sent_stem %>%
anti_join(stop_words)
#bing sentiment analysis on Health24tweets
bing_Health24 <-
cleaned_Health24_sent %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort =TRUE)%>%
ungroup()
#Plot
bing_Health24 %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
labs(title = "Tweets of Health24 ",
y = "Contribution to sentiment",
x = "") +
coord_flip()+
facet_wrap(~sentiment, scales = "free_y") +
theme_hc()
#select
enca_sent <- enca_timeline_df  %>%
select("screen_name", "text")
#manual removal of http elements
enca_sent$stripped_text <-
gsub("http\\S+", "",enca_sent$text)
#unnest_tokens to convert to lower case + remove punctuation + add indiv tweet ID
enca_sent_stem <-
enca_sent %>%
select(stripped_text) %>%
unnest_tokens(word, stripped_text)
#remove stop words
cleaned_enca_sent <-
enca_sent_stem %>%
anti_join(stop_words)
#bing sentiment analysis on eNCA tweets
bing_enca <-
cleaned_enca_sent %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort =TRUE)%>%
ungroup()
#Plot
bing_enca %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
labs(title = "Tweets of eNCA",
y = "Contribution to sentiment",
x = "") +
coord_flip()+
facet_wrap(~sentiment, scales = "free_y") +
theme_hc()
#SELECTION OF ALL MEDIA SOURCES WITH SENTIMENT
Bhek_bing <-
tidy_bhekisisa_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
nicd_bing <-
tidy_nicd_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
healthza_bing <-
tidy_healthza_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ewn_bing <-
tidy_ewnreporter_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
news24_bing <-
tidy_news24_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
GovernmentZA_bing <-
tidy_GovernmentZA_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
health24_bing <-
tidy_health24_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
SAgovnews_bing <-
tidy_SAgovnews_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
sabc_bing <-
tidy_sabc_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
enca_bing <-
tidy_enca_tweets %>%
left_join(get_sentiments("bing")) %>%
count(sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
#ADDITION OF ID AND T/F VALUE
name <- c('Bhekisisa')
kleur <- c(FALSE)
Bhek_bing <-cbind(name,Bhek_bing, kleur)
name <- c('NICD')
kleur <- c(TRUE)
nicd_bing <-cbind(name,nicd_bing, kleur)
name <- c('HealthZA')
kleur <- c(TRUE)
healthza_bing <-cbind(name,healthza_bing, kleur)
name <- c('EWNreporter')
kleur <- c(FALSE)
ewn_bing <-cbind(name,ewn_bing, kleur)
name <- c('News24')
kleur <- c(FALSE)
news24_bing <-cbind(name,news24_bing, kleur)
name <- c('GovernmentZA')
kleur <- c(TRUE)
GovernmentZA_bing <-cbind(name,GovernmentZA_bing, kleur)
name <- c('Health24')
kleur <- c(FALSE)
health24_bing <-cbind(name,health24_bing, kleur)
name <- c('SAgovnews')
kleur <- c(TRUE)
SAgovnews_bing <-cbind(name,SAgovnews_bing, kleur)
name <- c('SABC')
kleur <- c(FALSE)
sabc_bing <-cbind(name,sabc_bing, kleur)
name <- c('eNCA')
kleur <- c(FALSE)
enca_bing <-cbind(name,enca_bing, kleur)
#Combination of All Media Sources Described Above
all_bing_df <-
bind_rows(Bhek_bing,healthza_bing,nicd_bing,ewn_bing,news24_bing,
GovernmentZA_bing, health24_bing, sabc_bing, enca_bing, SAgovnews_bing)
#Plot
ggplot(all_bing_df, aes(x = name, y = sentiment, fill = kleur)) +
geom_col(position = "identity", size = 0.25) +
scale_fill_manual(values = c("#FF5722", "#00ADB5"),
guide = FALSE) +
theme_hc() +
xlab(NULL) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "Overall Sentiment of each Media Source", caption = "Updated: July 2021")
media_sent <-
complete_data_source_df %>%
select("screen_name", "text")
#manual removal of http elements
media_sent$stripped_text <-
gsub("http\\S+", "",media_sent$text)
#unnest_tokens to convert to lower case + remove punctuation + add indiv tweet ID
media_sent_stem <-
media_sent %>%
select(stripped_text) %>%
unnest_tokens(word, stripped_text)
#remove stop words
cleaned_media_sent <-
media_sent_stem %>%
anti_join(stop_words)
#bing sentiment analysis on tweets
bing_media <- cleaned_media_sent %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort =TRUE)%>%
ungroup()
#Plot
bing_media %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(title = "Tweets of All Media Sources",
y = "Contribution to sentiment",
x = NULL, caption = "Updated: July 2021") +
coord_flip() +
theme_hc()
complete_data_source_df2 <-
bhekisisa_tweets %>%
full_join(healthza_tweets) %>%
full_join(news24_tweets) %>%
full_join(nicd_tweets) %>%
full_join(enca_timeline_df) %>%
full_join(health24_timeline_df)
vaccine_tweets <-
dplyr::filter(complete_data_source_df2, grepl('vaccine', text))
vaccine_text <- vaccine_tweets$text
vaccine_corp <- Corpus(VectorSource(vaccine_text))
twitterHandleRemover <- function(x) gsub("@\\S+","", x)
hashtagRemover <- function(x) gsub("#\\S+","", x)
emojiRemover <- function(x) gsub("[^\x01-\x74F]","",x)
toSpace = content_transformer(function(x,pattern)gsub(pattern,"",x))
cleaner <- function(vaccine_corp)
{
vaccine_corp <-
tm_map(vaccine_corp, toSpace,
"?(f|ht)tp(s?)://(.*)[.][a-z]+")
vaccine_corp <-
tm_map(vaccine_corp,
content_transformer(twitterHandleRemover))
vaccine_corp <-
tm_map(vaccine_corp,
content_transformer(hashtagRemover))
vaccine_corp <-
tm_map(vaccine_corp, removePunctuation)
vaccine_corp <-
tm_map(vaccine_corp, emojiRemover)
vaccine_corp <-
tm_map(vaccine_corp, stemDocument)
vaccine_corp <-
tm_map(vaccine_corp, content_transformer(tolower))
return(vaccine_corp)
}
vaccine_corp <-
cleaner(vaccine_corp)
new_vaccinedf <-
data.frame(text = sapply(vaccine_corp, as.character),
stringsAsFactors = FALSE)
new_vaccinedf <-
unlist(new_vaccinedf)
pattern = "^[[:space:]]*$"
vaccine_df <-
new_vaccinedf[grep(pattern, new_vaccinedf, invert = TRUE)]
#sentiment analysis
sentiments_df <-
sentiment_attributes(vaccine_df)
new_2 <-
get_sentences(vaccine_df)
tweet_sentiment<-
sentiment_by(new_2, averaging.function = average_weighted_mixed_sentiment)
#visualization of sentiments
# Make the graph
vaccine_sent_graph = plot_ly(x=tweet_sentiment$word_count,y=tweet_sentiment$ave_sentiment,mode="markers",colors =c("#FF5722","#00ADB5"),size=abs(tweet_sentiment$ave_sentiment)/3 , color=ifelse(tweet_sentiment$ave_sentiment>0,"Positive","Negative") ) %>%
#Change hover mode in the layout argument
layout( hovermode="closest",title="Sentiment analysis by Tweet",xaxis= list(title = "Number of words per Tweet",size=18),yaxis = list(title = "Sentiments by Tweet",size=18))
# show the graph
vaccine_sent_graph
# Comparison Cloud of the Sentiment of Selected Media Sources
tidy_all_media_tweets %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("#FF5722", "#00ADB5"),
max.words = 100, scale = c(4, 0.5))
# Plot all twitter activity in weekly intervals
ts_plot(joint_timelines, "weeks", color = "#00ADB5", size = 1) +
theme_hc() +
labs(title = "Time Series Showing All Twitter Activity of Chosen Media") +
xlab("Week") +
ylab("Tweet Frequency")
# Group by is_retweet and plot multiple time series of retweets vs non-retweets
joint_timelines %>%
dplyr::group_by(is_retweet) %>%
ts_plot("hours", color = "#00ADB5", size = 1) +
theme_hc() +
labs(title = "Time Series: Retweets vs Non-retweets") +
ylab("Tweet Frequency") +
xlab("Hours")
# Group by screen_name and plot each media source's time series
ts_plot(dplyr::group_by(joint_timelines, screen_name),
"weeks", size = 1) +
theme_hc() +
labs(title = "Time Series of Tweets from Individual Media Sources",
caption = "Updated: July 2021") +
xlab("Week") +
ylab("Tweet Frequency")
# Group by screen_name and is_retweet, then plot individual time series
joint_timelines %>%
dplyr::group_by(screen_name, is_retweet) %>%
ts_plot("months", size = 1) +
ylab("Tweet Frequency") +
xlab("Months") +
theme_hc() +
labs(title = "Time Series of Tweets from Individual Media Sources and if they are Retweets",
caption = "Updated: July 2021")
# VACCINE SENTIMENT ANALYSIS
#Convert created_at column into Date and Time of Bhekisisa
bhekisisa_tweets$Date <- as.Date(bhekisisa_tweets$created_at)
bhekisisa_tweets$Time <- format(bhekisisa_tweets$created_at,"%H:%M:%S")
#select timeframe
bhek_vac <- bhekisisa_tweets[bhekisisa_tweets$Date >= "2021-04-14" & bhekisisa_tweets$Date <= "2021-05-31",]
bhek_vac1 <- bhekisisa_tweets[bhekisisa_tweets$Date >= "2021-06-01" & bhekisisa_tweets$Date <= "2021-07-08",]
#Convert created_at column into Date and Time of Health24
health24_timeline_df$Date <- as.Date(health24_timeline_df$created_at)
health24_timeline_df$Time <- format(health24_timeline_df$created_at,"%H:%M:%S")
#select timeframe
health24_vac <- health24_timeline_df[health24_timeline_df$Date >= "2021-04-14" & health24_timeline_df$Date <= "2021-05-31",]
health24_vac1 <- health24_timeline_df[health24_timeline_df$Date >= "2021-06-01" & health24_timeline_df$Date <= "2021-07-08",]
#Convert created_at column into Date and Time of NICD
nicd_tweets$Date <- as.Date(nicd_tweets$created_at)
nicd_tweets$Time <- format(nicd_tweets$created_at,"%H:%M:%S")
#select timeframe
nicd_vac <-nicd_tweets[nicd_tweets$Date >= "2021-04-14" & nicd_tweets$Date <= "2021-05-31",]
nicd_vac1 <-nicd_tweets[nicd_tweets$Date >= "2021-06-01" & nicd_tweets$Date <= "2021-07-08",]
#Convert created_at column into Date and Time of eNCA
enca_timeline_df$Date <- as.Date(enca_timeline_df$created_at)
enca_timeline_df$Time <- format(enca_timeline_df$created_at,"%H:%M:%S")
#select timeframe
enca_vac <- enca_timeline_df[enca_timeline_df$Date >= "2021-04-14" & enca_timeline_df$Date <= "2021-05-31",]
enca_vac1 <- enca_timeline_df[enca_timeline_df$Date >= "2021-06-01" & enca_timeline_df$Date <= "2021-07-08",]
#Convert created_at column into Date and Time of HealthZA
healthza_tweets$Date <- as.Date(healthza_tweets$created_at)
healthza_tweets$Time <- format(healthza_tweets$created_at,"%H:%M:%S")
#select timeframe
healthza_vac <- healthza_tweets[healthza_tweets$Date >= "2021-04-14" & healthza_tweets$Date <= "2021-05-31",]
healthza_vac1 <- healthza_tweets[healthza_tweets$Date >= "2021-06-01" & healthza_tweets$Date <= "2021-07-08",]
#Convert created_at column into Date and Time of News24
news24_tweets$Date <- as.Date(news24_tweets$created_at)
news24_tweets$Time <- format(news24_tweets$created_at,"%H:%M:%S")
#select timeframe
news24_vac <- news24_tweets[news24_tweets$Date >= "2021-04-14" & news24_tweets$Date <= "2021-05-31",]
news24_vac1 <- news24_tweets[news24_tweets$Date >= "2021-06-01" & news24_tweets$Date <= "2021-07-08",]
#combined df from 04-14 to 05-31
complete_vac_df1 <-
bhek_vac %>%
full_join(healthza_vac) %>%
full_join(news24_vac) %>%
full_join(nicd_vac) %>%
full_join(enca_vac) %>%
full_join(health24_vac)
#search all tweets containing 'vaccine'
complete_vac_df1 <-
dplyr::filter(complete_vac_df1, grepl('vaccine', text)) %>%
select("screen_name", "text")
complete_vac_df1$stripped_text <-
gsub("http\\S+", "",complete_vac_df1$text)
complete_sent_df1 <-
complete_vac_df1 %>%
select(stripped_text) %>%
unnest_tokens(word, stripped_text)
complete_sent_df1 %>%
anti_join(stop_words)
#bing sentiment analysis on complete_vac_df1 tweets
complete_sent_df1 <- complete_sent_df1 %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort =TRUE)%>%
count(sentiment)%>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
name <- c('14 April- 31 May 2021')
kleur <- c(FALSE)
complete_sent_df1 <-
cbind(name,complete_sent_df1, kleur)
#combined df from 06-01 to 07-08
complete_vac_df2 <-
bhek_vac1 %>%
full_join(healthza_vac1) %>%
full_join(news24_vac1) %>%
full_join(nicd_vac1) %>%
full_join(enca_vac1) %>%
full_join(health24_vac1)
#search all tweets containing 'vaccine'
complete_vac_df2 <-
dplyr::filter(complete_vac_df2, grepl('vaccine', text)) %>%
select("screen_name", "text")
complete_vac_df2$stripped_text <-
gsub("http\\S+", "",complete_vac_df2$text)
complete_sent_df2 <- complete_vac_df2 %>%
select(stripped_text) %>%
unnest_tokens(word, stripped_text)
complete_sent_df2 %>%
anti_join(stop_words)
#bing sentiment analysis on complete_vac_df1 tweets
complete_sent_df2 <-
complete_sent_df2 %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort =TRUE)%>%
count(sentiment)%>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
name <- c('1 June- 8 July 2021')
kleur <- c(FALSE)
complete_sent_df2 <-
cbind(name,complete_sent_df2, kleur)
#bind both sentiment dfs
complete_df <-
bind_rows(complete_sent_df2, complete_sent_df1)
#plot both sentiment df on one plot,
ggplot(complete_df, aes(x = sort(name, decreasing = T), y = sentiment, fill = kleur)) +
geom_col(position = "identity", size = 0.25) +
scale_fill_manual(values = c("#00ADB5"), guide = FALSE)+
theme_hc()+
labs(title = "Tweets containing 'vaccine'",
y = "Contribution to sentiment",
x = NULL, subtitle = "From 14 April to 8 July 2021 ")
# Converting and formatting dates
vaccine_tweets$Date <-
as.Date(vaccine_tweets$created_at)
vaccine_tweets$Time <-
format(vaccine_tweets$created_at,"%H:%M:%S")
vaccinations$Date <-
as.Date(vaccinations$date)
# Tokenizing tweets
tidy_vaccine_tweets <-
vaccine_tweets %>%
select(created_at,text) %>%
unnest_tokens("word", text)
# Cleaning and filtering for vaccine words
vaccine_words <-
vaccine_tweets %>%
mutate(text = str_remove_all(text, "&amp;|&lt;|&gt;"),
text = str_remove_all(text, "\\s?(f|ht)(tp)(s?)(://)([^\\.])[\\.|/](\\S)"),
text = str_remove_all(text, "[^\x01-\x7F]")) %>%
unnest_tokens(word, text, token = "tweets") %>%
filter(!word %in% stop_words$word,
!word %in% str_remove_all(stop_words$word, "'"),
str_detect(word, "[a-z]"),
!str_detect(word, "^#"),
!str_detect(word, "@\\S+")) %>%
count(word, sort = TRUE)
# Plot the frequency of vaccine tweets over time
ts_plot(vaccine_tweets) +
ggtitle("Line Graph showing the frequency of vaccine tweets over time")
# Plot Line Graph graph Showing Daily Vaccinations Over Time
ggplot(vaccinations,
aes(x = round_date
(parse_date_time
(date, "Y%/m%/d%"),
unit = "day"),
y = vaccinated_daily)) +
geom_line(stat = "identity",
color = "red",
size = 1) +
xlab("Date") +
ylab("Daily Vaccinations") +
ggtitle("Line Graph graph Showing Daily Vaccinations Over Time")
# Plot line graph showing total vaccinations over time
ggplot() +
geom_line(vaccinations,
mapping = aes(x = round_date
(parse_date_time
(date, "Y%/m%/d%"),
unit = "day"),
y = vaccinated_total),
stat = "identity",
color = "red",
size = 1) +
xlab("Date") +
ylab("Total Vaccinations") +
coord_cartesian(ylim = c(0,5000000)) +
ggtitle("Line Graph graph Showing Total Vaccinations Over Time")
tinytex::install_tinytex()
# Packages loaded for use in this report
library(tinytex)
